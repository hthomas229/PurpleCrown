library(tidyverse)

# UNITE

# make some things to unite
things <- tribble(
          ~type, ~id,
          "Thing", 1,
          "Thing", 2,
          "Thing", 3,
          "Thing", 4,
          "Thing", 5)

#check types

str(things)

# unite thing type and id

things %>% 
  unite("name", type:id, sep = (" "), remove = TRUE, na.rm = TRUE)

# default separator is _  -- you can change with the sep argument
# the default for removing the original column is TRUE
#if your data includes NAs you can aslo use na.rm = TRUE




#SEPARATE

# separate is superseded but I love it because of the
# default sep argument for the delimiter:  sep = "[^[:alnum:]]+"


# create some stuff to work with

stuff <- tribble(
  ~id, ~thing,
  1, "banana/split",
  2, "banana-split",
  3, "banana.split",
  4, "banana|split",
  5, "banana,split"
)

stuff

stuff %>% 
  separate(thing,
           into =c("bananas", "splits"),
           remove = TRUE)  # set remove=FALSE to keep original column


# Create a bananas data frame

bananas <- data.frame(id = c("banana10", "banana20", "banana30", "banana40"))

bananas

# regex Use separate() to split the string at the transition between letters and numbers
banana_split <- bananas %>%
  separate(id, into = c("fruit", "num"), sep = "(?<=[A-Za-z])(?=[0-9])|(?<=[0-9])(?=[A-Za-z])")

# View the result
banana_split

# Use separate() with more columns to handle multiple pieces
banana_split2 <- bananas %>%
  separate(id, into = c("part1", "part2", "part3"), 
           sep = "(?<=[A-Za-z])(?=[0-9])|(?<=[0-9])(?=[A-Za-z])", 
           fill = "right")  # 'fill = "right"' will handle missing values

# View the result
banana_split2



#separate superseded in favor of 3 stringr based functions

# 1.  separate_wider_delim

df <- tibble(
  id = 1:3,
  x = c("thing_1", "thing_2", "thing_42")
)

df

df %>%
  separate_wider_delim(x, delim = "_", names = c("type", "num"))


#2. separate_wider_position

df %>%
  separate_wider_position(
    x, 
    widths = c(type = 5, 1, num = 2)
  )

# 1st 5 chars type , skip 1 char, last2 chars num

#debug error

df %>%
  separate_wider_position(
    x, 
    widths = c(type = 5, 1, num = 2),
    too_few = "debug"
  )


#fix error

df %>%
  separate_wider_position(
    x, 
    widths = c(type = 5, 1, num = 2),
    too_few = "align_start"
  )

#3. separate_wider_regex

df %>%
  separate_wider_regex(
    x, 
    patterns = c(type = ".*", "_", num = "\\d+")
  )



#patterns = c(type = ".*", "_", num = "\\d+"):
#.*: Matches all characters up to the first _ (assigned to type).
#"_": Matches the _ delimiter, but is ignored since it's not assigned to a named column.
#"\\d+": Matches one or more digits (e.g., 1, 2, 42).


#separate_longer_delim()

things3 <- tibble(id = 1:4, x = c("thing", "thing 1", "thing 1 a", NA))


things3

things3 %>% separate_longer_delim(x, delim = " ")

#separate longer position -  take a string and split into multiple rows

things4 <- tibble(id = 1:3, x = c("thing", "stuff", ""))

things4

things4 %>% separate_longer_position(x, 1)

things4 %>% separate_longer_position(x, 2)
 